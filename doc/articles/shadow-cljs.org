* IN PROGRESS Shadow Cljs                  :clojure:clojurescript:build_tool:
   :PROPERTIES:
   :DATE-CREATED: <2023-11-30 Thu>
   :DATE-UPDATED: <2023-11-30 Thu>
   :BOOK: nil
   :BOOK-CHAPTERS: nil
   :COURSE: nil
   :COURSE-LESSONS: nil
   :END:
** Server Mode
*** Conceptos
- recomendado para tareas prolongadas como ~watch~
*** Cuando reiniciarlo
- sólo si cambiamos ~:dependencies~ es necesario reiniciar el servidor
*** Ejecución rápida de los Comandos de shadow-cljs
- _reutilizan_ la misma *instancia de servidor JVM* en ejecución
- _evitan la espera de crear/iniciar una nueva instancia_ de servidor JVM

#+BEGIN_QUOTE
(JVM) *Java Virtual Machine*, es una máquina virtual Java
que ejecuta instrucciones generadas por un *compilador Java*

es decir es el *entorno* en el que _se ejecutan los programas de Java_
y _garantiza la PORTABILIDAD de las aplicaciones_ Java
#+END_QUOTE
** Comandos
*** Watch
#+BEGIN_QUOTE
si observa cambios en los archivos de código fuente
- *recompila* los archivos
- aplica concepto de *hot-reload*
#+END_QUOTE
*** Ejemplo en la linea de comandos
#+BEGIN_SRC shell
  # compile a build once and exit
  # =============================
  shadow-cljs compile app

  # compile and watch
  # ==================
  #
  # Commands that do long-running things implicitly start a server instance (eg. watch)
  # but it is often advisable to have a dedicated server process running.
  shadow-cljs watch app

  # connect to REPL for the build
  # =============================
  #
  # available while watch is running
  shadow-cljs cljs-repl app

  # connect to standalone node repl
  # ===============================
  shadow-cljs node-repl

  # Running a release build optimized for production
  # ================================================
  shadow-cljs release app

  # Release debugging commands
  # ==========================
  #
  # these commands can help track down the casues of the issues due to :advanced compilation
  shadow-cljs check app
  shadow-cljs release app --debug

  # Start the Server Mode in the foreground
  # =======================================
  shadow-cljs server

  # if you'd like REPL to control the server process
  shadow-cljs -clj-repl

  # Start the Server Mode in the background
  # ========================================
  #
  shadow-cljs start
  shadow-cljs stop
  shadow-cljs restart
#+END_SRC
** Referencias
1. https://shadow-cljs.github.io/docs/UsersGuide.html
